apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "kafka-consumer.fullname" . }}
  labels:
    {{- include "kafka-consumer.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "kafka-consumer.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "kafka-consumer.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "kafka-consumer.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              pip install confluent-kafka &&
              python /scripts/consumer.py
          volumeMounts:
            - name: script-volume
              mountPath: /scripts
          env:
            - name: KAFKA_USERNAME
              valueFrom:
                secretKeyRef:
                  name: kafka-credentials
                  key: username
            - name: KAFKA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka-credentials
                  key: password
            - name: KAFKA_SERVER
              value: "{{ .Values.script.kafka_server }}"
            - name: TOPIC_NAME
              value: "{{ .Values.script.topic_name }}"
            - name: CONSUMER_GROUP_ID
              value: "{{ .Values.script.consumer_group_id }}"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: script-volume
          configMap:
            name: {{ include "kafka-consumer.fullname" . }}
